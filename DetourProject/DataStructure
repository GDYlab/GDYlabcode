%% this is a document for data structure of fundamental varaibles for the detour project
% the default units are cm (length), s (time), Hz (rate)
%====================================================================================================%
variable "ses"
ses contains active track and the linear position limit of tracks for each session
ses is a structure with length equals to number of run session (4 in detour project)
it has the following fields that were usually used:
ses(i).tra_p is a vector containing active tracks in run session i. In detour project,
we have 1,2,3,4 as standard linear tracks, and track 5,6 as detour tracks (250cm).
In that case, we can simply run the following command to find out for a given session, which track is replaced by detour
replacet = setdiff([1,2,3,4],ses(i).tra_p);

ses(i).tralim is a n*2 matrix (should be 4*2) containing linear position limit for each track,
rows matching tracks in ses(i).tra_p, and columns are start and end linear position for that track in session i.

we usually use the command "ses = Detour_Ordertracks(ses)" to make sure for each session,
tracks in tra_p as well as other fields are in ascending order in terms of their linear position, so in
ses(i).tralim, it should have ascending order across rows

ses(i).tramarks contains the segment length for detoured tracks, we can directly use the command
"rplens = Detour_GetDetourSegLen(ses,[2,4])" to get the length of stationary linear segment length for detoured tracks
(should be 50cm, but because of camera distortion and error in linearization, the value can be different);
in rplens, it's a cell array where only element 2 and 4 (they are detoured) have value. In each element, 
it's a vector with length of 2, to give the length of start and end stationary segment during detour.

To get the exact start and end linear position for the U shape detour segment, we should do the following
if we want to know the detour segment linear position range in detour session 2:
    % order tracks by linear position
    ses = Detour_Ordertracks(ses);
    % get detour track segment length during detour
    rplens = Detour_GetDetourSegLen(ses,[2,4]);
    % find detour track in session 2
    dettrack = setdiff([1,2,3,4],ses(2).tra_p);
    % get linear position for the entire 250 cm detoured track
    detlpos = ses(2).tralim(dettrack,:);
    % remove the stationary segment
    detseglpos = [detlpos(1) + rplens{dettrack}(1), detlpos(2) - rplens{dettrack}(2)];

%====================================================================================================%
variable "mazel"
mazel contains behavior data of animal during maze run
mazel is a cell array with length equals to number of run sessions
for each cell element, it's a n*8 matrix
rows are time stamps,
columns are: '1, x coordinates','2, y coordinates', '3, angular coordinates (not useful in this project)',
'4, linear position','5, run direction based on instanteous velocity','6, timestamp',
'7, velocity', '8, run direction based on manually checked laps'

note that due to potential overlap during defining the track, timestamps may not be unique
, which could cause issue during interpolation, thus we usually need to run the command
"mazel = uniquemazeltime(mazel)"

%====================================================================================================%
variable "PlFields"
PlFields gives the tuning curve of cells for run sessions
PlFields is a high dimensional array, with D1 being cells, D2 being sessions, D3 being run direction, and D4 being spatial bins
the value is the firing rate. 
variable "PlFmesh" gives the spatial bin corresponding to D4 in "PlFields"
for example, to get all cells tuning curves on track2, direction1, run3, we need to do this
    % order tracks by linear position
    ses = Detour_Ordertracks(ses);
    % find the track linear position range
    tlpos = ses(3).tralim(2,:);
    % find spatial bins in that track range
    spaidx = idxinrange(PlFmesh,tlpos);
    % get cells tuning curves
    tcnow = squeeze(PlFields(:,3,1,spaidx)); % rows are cells, columns are spatial bins on track 2
    
%====================================================================================================%
variable "ClF"
ClF gives spikes of cells during run sessions
ClF is a nc*nsess cell array with nc being number of cells, and nsess being number of run sessions,
in each element, it's a n*5 matrix, with row bing all the spikes for the cell in that session, and columns being:
'1, spike time','2, linear position','3, velocity (cm/s)','4, direction based on laps','5, direction based on velocity'
columns 2-5 are obtained by interpolating spike time into behavioral data (mazel)

%====================================================================================================%
variable "M1"
M1 gives place fields informations
M1 is an high dimensional array with D1 being cells, D2 being parameters of place fields, D3 being subfields sorted by peak firing rates, D4 being sessions
The parameters in the 2nd dimensions are ordered by direction 1 and direction2 :
'1-2IntegratedRate','3-4skewness','5-6PeakRate','7-8FieldLength',...
'9-10PeakLocCM','11-12Dis2End','13-14Ratio','15-16Nlaps','17-18LeftEnd','19-20RightEnd'
For example M1(5,9,2,4) gives the peak location of cell5's second large place field in session 4 on direction 1
M1(5,10,2,4) gives the peak location of cell5's second large place field in session 4 on direction 2
For all the variables related to linearized position in direction 1, 
we should use 1200 minus that value to get the corrected position with start of maze equals to 0.
For example, if cell1's largest place field has peak location at the start of the maze (should have linear position of 0) in session 1, 
we will have M1(1,9,1,1) = 1200

%====================================================================================================%
variable "M2"
M2 gives basic information of cells
M2 is an high dimensional array with D1 being cells, D2 being parameters of cells, D3 being sessions
The parameters in the 2nd dimensions are ordered by direction 1 and direction2 :
'1-2Bcell','3-4MeanRate','5-6Nfield','7-8AvgRate','9-10ClWidth'...
'11-12FieldExtent(proportion)','13-14VarianceOfFieldRate','15-16BurstRatio(proportionOfSpikes)',...
'17-18BurstRatioDuringRun','19-20eletunit','21-22celltype'
we usually use information in M2 to exclude interneurons in analysis with this command
"[M1,M2,ClF,PlFields,nc,pyrid,clu2pyr,pyrintid] = CA_ExcludeInt(M1,M2,ClF,PlFields)"
